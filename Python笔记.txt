Python笔记
python数据类型
	整数，浮点数（1.23e9,1.2e-5）,字符串，布尔值，空值为None不是0
	print：print语句也可以跟上多个字符串，用逗号“,”隔开，就可以连成一串输出
	#是注释的意思
	在字符串前面加个前缀 r ，表示这是一个 raw 字符串，里面的字符就不需要转义
	表示多行字符串，可以用'''...'''表示
	Unicode表示的字符串用u'...';多行:u'''...''';raw+多行：ur'''...''',如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释:# -*- coding: utf-8 -*-
	布尔类型：与：and，或：or，非：not。Python把0、空字符串''和None看成 False。 and 和 or 运算的一条重要法则：短路计算。
	--------------------------for i in range(n):-------------------------for循环
List：    append()总是把新的元素添加到 list 的尾部，list的 insert()方法，它接受两个参数，第一个参数是索引号，第二个参数是待添加的新元素
		  pop()方法总是删掉list的最后一个元素，并且它还返回这个元素，也可以pop(index),把索引为index的删掉

tuple是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。	  
		tuple和创建list唯一不同之处是用( )替代了[ ]
		单元素 tuple 要多加一个逗号“,”，这样就避免了歧义,如t(1,)
		tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
	 
	 if else语句。注意: else 后面有个“:”。elif 意思就是 else if。
	 for循环。for 变量名 in L:。。。注意:  name 这个变量是在 for 循环中定义的，意思是，依次取出list中的每一个元素，并把元素赋值给 name，然后执行for循环体
	
dict:花括号 {} 表示这是一个dict，然后按照 key: value, 写出来即可。最后一个 key: value 的逗号可以省略。
		 由于dict也是集合，len() 函数可以计算任意集合的大小
		 d[key] 的形式来查找对应的 value,先判断一下 key 是否存在，
		 一是用 in 操作符：if key in d:...
		 二是使用dict本身提供的一个 get 方法，在Key不存在的时候，返回None
		dict的第一个特点是查找速度快，dict的第二个特点就是存储的key-value序对是没有顺序的，dict的第三个特点是作为 key 的元素必须不可变
		dict是可变的，用赋值语句：d[key]=value,如果key存在，会赋值会用新的 value 进行替换
		 遍历dict，用for循环可以遍历 dict 的 key。
	 
 set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。
		 创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素
		 访问 set中的某个元素实际上就是判断一个元素是否在set中，用 in 操作符判断。元素 in s？
		 遍历set：用for 变量名 in s：,,,
		 更新set：添加元素时，用set的add()方法；删除set中的元素时，用set的remove()方法,如果删除的元素不存在set中，remove()会报错.
		 
-------------------------------------分割线--------------------------------------------------
函数： 
	abs() 函数，绝对值。
	cmp(x, y) 就需要两个参数，如果 x<y，返回 -1，如果 x==y，返回 0，如果 x>y，返回 1
	int()函数可以把其他数据类型转换为整数。如：int(12.3)
	str()函数把其他类型转换成 str。如：str(12.3)
	sum()函数接受一个list作为参数，并返回list所有元素之和
	定义一个函数要使用 def 语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用 return 语句返回。
	如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None。
	PS: return None可以简写为return。
	math包提供了sin()和 cos()函数.实用： math.cos(angle)
	返回多值:	用print打印返回结果，原来返回值是一个tuple!!
	
	递归函数:使用递归函数需要注意防止栈溢出。
	定义默认参数:
		int()函数的第二个参数是转换进制，如果不传，默认是十进制 (base=10)，如果传了，就用传入的参数------>函数的默认参数的作用是简化调用
		由于函数的参数按从左到右的顺序匹配，所以默认参数只能定义在必需参数的后面。默认参数要设默认值
	定义可变参数：
		可变参数的名字前面有个 * 号，我们可以传入0个、1个或多个参数给可变参数。
		Python解释器会把传入的一组参数组装成一个tuple传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。

-------------------------------------分割线--------------------------------------------------		
切片：
-->	对list进行切片，如：L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。如果第一个索引是0，还可以省略：L[:3]
						只用一个 : ，表示从头到尾：L[:]；L[::2]：第三个参数表示每N个取一个，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。
	把list换成tuple，切片操作完全相同，只是切片的结果也变成了tuple。
	倒序切片：记住倒数第一个元素的索引是-1。倒序切片包含起始索引，不包含结束索引。
	
-->	对字符串切片：
		如：'ABCDEFG'[:3]。字符串有个方法 upper() 可以把字符变成大写字母
		
-------------------------------------分割线--------------------------------------------------		
迭代：				迭代是一种抽象的数据操作，它不对迭代对象内部的数据有任何要求。
--> for循环遍历List和tuple。这种遍历我们称为迭代（Iteration）。
		Python 的 for循环不仅可以用在list或tuple上，还可以作用在其他任何可迭代对象上。
		迭代操作就是对于一个集合：
			注意: 集合是指包含一组元素的数据结构，我们已经介绍的包括：
				 1. 有序集合：list，tuple，str和unicode；
				 2. 无序集合：set
				 3. 无序集合并且具有 key-value 对：dict
	PS： enumerate() 函数：迭代永远是取出元素本身，而非元素的索引。对于有序集合，想拿到索引，用 enumerate() 函数。如：for index, name in enumerate(L):...
		 enumerate() 函数自动把每个元素变成 (index, element) 这样的tuple，再迭代.
		 zip()函数可以把两个 list 变成一个 list.如：zip([10, 20, 30], ['A', 'B', 'C'])------>[(10, 'A'), (20, 'B'), (30, 'C')]
-->	迭代dict的value:
		values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value.如：for v in d.values():。。。
		itervalues() 方法替代 values() 方法，迭代效果完全一样。
		两者区别：1. values() 方法实际上把一个 dict 转换成了包含 value 的list。
				  2. 但是 itervalues() 方法不会转换，它会在迭代过程中依次从 dict 中取出 value，所以 itervalues() 方法比 values() 方法节省了生成 list 所需的内存。
-->	同时迭代dict的 key和value：
		items() 方法把dict对象转换成了包含tuple的list，
		iteritems()效果一样
		两者区别：iteritems() 不把dict转换成list，而是在迭代过程中不断给出 tuple，所以， iteritems() 不占用额外的内存
		
----------------------------------分割线--------------------------------------------------
生成列表
	用range()生成list,如：[x * x for x in range(1, 11)]。
	PS：range(1, 100, 2) 可以生成list [1, 3, 5, 7, 9,...]
复杂表达式
	字符串可以通过 % 进行格式化，用指定的参数替代 %s。字符串的join()方法可以把一个 list 拼接成一个字符串
	如：tds = ['<tr><td>%s</td><td>%s</td></tr>' % (name, score) for name, score in d.iteritems()]------>print '\n'.join(tds)
条件过滤
	不改动 range()的情况下，可以加上 if 来筛选.如：[x * x for x in range(1, 11) if x % 2 == 0]
	isinstance(x, str) 可以判断变量 x 是否是字符串；
多层表达式
	for循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。
	如： [m + n for m in 'ABC' for n in '123']------>['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']
	
-------------------------------------进阶-----------------------------------------------------------
Python----->函数式编程
	函数 function，编写和调用函数；
	函数式 functional,编程范式；把计算视为函数而非指令、纯函数式编程、支持高阶函数、代码简单
	Python 函数式编程特点：
		是不是纯函数式编程：允许有变量
		支持高阶函数：函数也可以作为变量传入
		支持闭包
		有限度的支持匿名函数
	
高阶函数
	变量名可以指向函数,因此函数可以通过变量传给另一个函数,那这样的函数是高阶函数
	
	map()函数：是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。
		注意：map()函数不改变原有的 list，而是返回一个新的 list。map() 不仅仅可以处理只包含数值的 list，事实上它可以处理包含任意类型的 list，只要传入的函数f可以处理这种数据类型。
	reduce()函数：reduce()函数接收的参数和 map()类似，一个函数 f，一个list，但reduce()传入的函数 f 必须接收两个参数，reduce()对list的每个元素反复调用函数f，并返回最终结果值
		PS：reduce()还可以接收第3个可选参数，作为计算的初始值
	filter()函数: 接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
		积累：其中：strip() 方法用于移除字符串头尾指定的字符（默认为空格）：str.strip([chars]);
	自定义排序函数----->sorted()函数可对list进行排序,,,,,sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序

	python中返回函数:.....

闭包:内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包. 
	 PS: 特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变------->返回闭包不能引用循环变量

	匿名函数:关键字lambda 表示匿名函数，冒号前面的 x 表示函数参数.匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。

装饰器：本来要手动用高阶函数返回新函数，现在加个@就不用了，@高阶函数名
		f.__name__：__name__是一个特殊方法，存储的是函数的名称，每一个函数都会自动有这个方法
		打印日志：@log
		检测性能：@performance
		数据库事务：@transaction
		url路由：@post('/register')

	编写无参数decorator：decorator 用Python提供的 @ 语法，这样可以避免手动编写 f = decorate(f) 这样的代码。
			@log 自适应任何参数定义的函数，可以利用Python的 *args 和 **kw，保证任意个数的参数总是能正常调用：
	编写带参数decorator：@log('DEBUG')
							def my_func():    ------>my_func = log('DEBUG')(my_func)
								pass
	完善decorator:Python内置的functools可以用来自动化完成这个“复制”的任务....import functools    @functools.wraps(f) 
	经过@decorator“改造”后的函数，和原函数相比，除了功能多一点外,新函数函数名是@log内部定义的'wrapper'所以。。。。
	
	偏函数:functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2..import functools, int2 = functools.partial(int, base=2)
-------------------------------------------------------------分割线--------------------------------------------------
模块和包：
		包下面必须有 _init_.py 以区分普通文件--------------包和模块：模块是文件，包是文件夹，
		
	导入模块：from logging import log as logger   # logging的log现在变成了logger
	
	动态导入模块:利用ImportError错误，我们经常在Python中动态导入模块
		try 的作用是捕获错误，并在捕获到指定错误时执行 except 语句。如：try:
																			import json
																		except ImportError:
																			import simplejson as json
	__future__:“试用”某一新的特性，就可以通过导入__future__模块的某些功能来实现,如： from __future__ import division
		累积：  Python 2.7中引入3.x的除法规则，导入__future__的division
			在Python 3.x中，字符串统一为unicode，不需要加前缀 u，而以字节存储的str则必须加前缀 b。请利用__future__的unicode_literals
	
	安装第三方模块：如：在cmd中，pip install web.py
	
------------------------------------------------------------面向对象--------------------------------------------------
----------------面向对象基础------------------
面向对象：	类：用于定义抽象的类型，用class定义
			实例：根据累的定义被创建出来
			面向对象编程思想--数据封装： 不同的实例拥有相同的数据类型，但拥有不同的属性

定义类并创建实例：
		类通过 class 关键字定义，，类名以大写字母开头，紧接着是(object)，表示该类是从哪个类继承下来的
		创建实例使用 类名+()

创建实例属性：
		让每个实例拥有各自不同的属性<------对每一个实例，都可以直接给他们的属性赋值（666666）。。实例的属性可以像普通变量一样进行操作

初始化实例属性：(基础)
		为类添加一个特殊的__init__()方法，当创建实例时，__init__()方法被自动调用。PS：__init__() 方法的第一个参数必须是 self
		注意：类的__init__方法，还可接受任意关键字参数,这时要定义关键字参数，使用 **kw<-------------------解释器内部会将**kw拆分成对应的dict<----------kw.iteritems()历遍字典kw的所有key和value，分别匹配k，v
		同时，除了可以直接使用self.name = 'xxx'设置一个属性外，还可以通过 setattr(self, 'name', 'xxx') 设置属性。<---------setattr()方法接受3个参数：setattr(对象，属性，属性的值)，如：setattr(self,k,v)相当于self.k = v

访问限制：	
		有些属性不希望被外部访问<------------------一个属性由双下划线开头(__)，该属性就无法被外部访问。但是，一个属性以"__xxx__"的形式定义（特殊属性），又可以被外部访问了
		以单下划线开头的属性"_xxx"虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问
		
创建类属性：
		类是模板，而实例则是根据类创建的对象=>实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。同时，类属性也是可以动态添加和修改
		PS：在类的方法中调用类属性，要用类名.类属性=...
		
类属性和实例属性名字冲突：
		当实例属性和类属性重名时，实例属性优先级高。不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。
		把类属性改为私有，外部就不能访问该属性。

定义实例方法：
		实例的方法就是在类中定义的函数，它的第一个参数永远是 self <-----------在实例上调用时self不需要显式传入
		实例方法内部，可以访问所有实例属性，这样，如果外部需要访问私有属性，可以通过方法调用获得
		
		class 中定义的实例方法其实也是属性，它实际上是一个函数对象<-----------因为方法也是一个属性，所以，它也可以动态地添加到实例上，
																			  只是需要用 types.MethodType() 把一个函数变为一个方法.如：实例名.新定义的方法名 = types.MethodType(类中定义的方法, 实例名, 对应的类名)
																			 
定义类方法（@classmeth）：
		和属性类似，方法也分实例方法和类方法。
		要在class中定义类方法，需要这么写：通过标记一个 @classmethod，该方法将绑定到类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 cls， cls.属性 实际上相当于 类名.属性。
		PS：因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用
																			  
-------------------继承-----------------------
继承：	
	子类和父类是is关系：is关系指的是：黄鹂是鸟，却不能说鸟是黄鹂
	has关系指的是：学生有一本书，不能说学生是一本书：两个has关系的类不能继承，只能以属性组合到类中，如使用Book类的bookName-> self.book=Book(bookName)
--->继承特点：
		1、总是从某个类继承，没有合适的类时使用object类继承
		2、调用super().__init__方法（初始化父类）
		如Student类从父类继承name和gender：super(Student,self).__init__(name,gender)
	PS：函数super(Student, self)将返回当前类继承的父类，即 Person ，
		然后调用__init__()方法，注意self参数已在super()中传入，在__init__()中将隐式传递，不需要写出（也不能写）。

判断类型（isinstance()）
多态：
		子类拥有自己的x()方法以及从父类继承了x()方法，但调用 子类.x()总是先查找它自身的定义，如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止。
		由于Python是动态语言,传递给函数的参数 x 不一定是 Person 或 Person 的子类型。任何数据类型的实例都可以，只要它有一个whoAmI()的方法即可
	积累：Python提供了open()函数来打开一个磁盘文件，并返回 File 对象。File对象有一个read()方法可以读取文件内容。
			json.load()并不一定要从一个File对象读取内容，只要有read()方法，就称为File-like Object，都可以传给json.load()
				如：import json
						f = open('/path/to/file.json', 'r')
						print json.load(f)
多重继承：
		多重继承的目的是从两种继承树中分别选择并继承出子类，以便组合功能使用。

获取对象信息：
		type(属性值) 函数获取变量的类型
		dir(变量) 函数获取变量的所有属性。。。。对于实例变量，dir()返回所有实例属性，包括`__class__`这类有特殊意义的属性。注意到方法`whoAmI`也是 s 的一个属性。
		getattr(实例变量,'属性名',可省默认值),
		setattr(实例变量,'属性名','属性值')
			如： getattr(s, 'name')  # 获取name属性
				 setattr(s, 'name', 'Adam')  # 设置新的name属性
				 getattr(s, 'age')  # 获取age属性，但是属性不存在，报错：
				 getattr(s, 'age', 20)  # 获取age属性，如果属性不存在，就返回默认值20：
				 
--------------------定制类----------------------------
特殊方法（魔术方法）：
			特殊方法：
				用于print的 __str__
				用于len的__len__
				用于cmp的__cmp__
				etc...
			python特殊方法特点：
				1.定义在class中
				2.不需要直接调用。某些特定方法会自动触发
				3.Python在某些操作上会自动调用这些
			正确实现：
				1.只编写要用的
				2.编写关联性的，比如：__getattr__,__setattr__,__delattr__
	 
	__str__和__repr__: 返回的是string类型
						print p  调用，p的 __str__。直接一个 p 调用的是__repr__ ：__str__()用于显示给用户，而__repr__()用于显示给开发人员。
					偷懒的方法，定义玩__str__后，__repr__=__str__即可
	__cmp__:
			对一组类的实例排序时，就必须提供我们自己的特殊方法 __cmp__()
			使用：在类中写完__cmp__后，L = [实例1，实例2，实例3...]，然后，sorted(L)
	 
	__len__:
			一个类表现得像一个list，要获取有多少个元素，就得用 len() 函数。
	
	数学运算:
			要表示有理数，可以用一个Rational类来表示。进行+运算，需要正确实现__add__，减法运算：__sub__，乘法运算：__mul__，除法运算：__div__
			积累：def gcd(a, b):                <------------------求最大公约数
					if b == 0:
						return a
					return gcd(b, a % b)
	
	类型转换：
			把 Rational 转为 int，r = Rational(12, 5)，n = int(r)<-------要让int()函数正常工作，只需要实现特殊方法__int__()，
																		 要让float()函数正常工作，只需要实现特殊方法__float__()

	@property：
			积累：抛出异常： raise ValueError('invalid score')
			@property          <---第一个score(self)是get方法，用@property装饰
			def score(self):
				return self.__score
			@score.setter
			def score(self, score):     <-----第二个score(self, score)是set方法，用@score.setter装饰.@score.setter是前一个@property装饰后的副产品
				if score < 0 or score > 100:
					raise ValueError('invalid score')
				self.__score = score
				
	__slots__：
			WHY：由于Python是动态语言，任何实例在运行期都可以动态地添加属性，如果要限制添加的属性，就可以利用Python的一个特殊的__slots__来实现
			使用：__slots__ = ('name', 'gender', 'score')
			目的:限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用__slots__也能节省内存。
			继承类：
		积累：
			子类的__slots__只需要包含Person类不包含的score属性即可。
			子类的__init__继承父类初始化使用super（son_class_name，self）.__init__(father_class_features)
	
	__call__：注意！！！！！！！！！！！！！！！！call 就是一个带返回值的init，所以两者不能重复写
			所有的函数都是可调用对象。
			一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。
			
			
			
-------------------------------------------------------IO：文件和socket-----------------------------------------------------
文件打开方式：f = file(name[, mode[, buffering]])。返回值 : 文件对象。
				buffering  是否缓冲 (0=不缓冲，1=缓冲, >1的int数=缓冲区大小)
文件读取方式：
			read([size]),读取size个字节，默认读取全部
			readline([size]):读取一行
			readlines([size]):读取完文件，返回每一行所组成的列表，不好
			可以用迭代器。。。for x in iter(f):....
文件写入方式：
			write(str):将字符串写入，必须是字符串文件
			writelines(sequence_of_strings):写多行到文件,参数为可迭代的对象
			因为如果只是write(),输入的字符串会保存在缓存中，需要关闭对象才会写入到文件，所以：
				1、主动调用close()或者flush方法
				2、写入数据量大于等于写缓存，写缓存同步到磁盘
																											笔记：
																												想要在文件输入中文，可以用codecs.open(,,'utf-8')
																												然后s='你好'
																												f.write('\r\n'unicode(s, "utf-8")),将字符串s转换成utf-8,其中'\r\n'在utf-8总表示换行
文件关闭方式：文件打开有限制
				

文件指针：	import os
			seek(offset[, whence])：
			offset : 偏移量，可以为负数
			whence设置为0，表示相对于文件开头移动（默认值）；
			whence设置为1，表示相对于当前位置移动；
			whence设置为2，表示相对于文件结尾移动。
			tell()返回当前指针的偏移
			
python文件属性 
	file.fileno():文件描述符 
	file.mode：文件打开权限 
	file.encoding:文件编码格式 
	file.closed:文件是否关闭
python标准文件
	文件标准输入：sys.stdin
	文件标准输出：sys.stdout
	文件标准错误：sys.stderr
	
创建一个utf-8或者其他编码格式的文件：import codecs
		使用codecs模块提供方法：使用：f=codecs.open(fname,mode,encoding,errors,buffering)

OS模块对文件和目录操作：
			import os
		os.open(filename,flag[,mode]):打开文件
			flag:
			打开文件方式   :    os.O_CREAT   os.O_RDONLY     os.O_WRONLY    os.O_RDWR
			读取文件方式   ：   os.read(fd,buffersize)  
			写入：				os.write(fd,string)
			文件指针操作：      os.lseek(fd,pos,how)
			文件关闭方式：	os.close(fd)
			
------------------------------------多线程及socket----------------------------
多线程使用方法：
	在python中提供了Thread这个类来实现多线程程序的开发<--------------需要import threading

	原型如下：
	class Thread(group=None, target=None, name=None, args=(), kwargs={})
	
		group 应当为 None，为将来实现Python Thread类的扩展而保留。

		target 是被 run()方法调用的回调对象. 默认应为None, 意味着没有对象被调用。

		name 为线程名字。默认，形式为'Thread-N'的唯一的名字被创建，其中N 是比较小的十进制数。

		args是目标调用参数的tuple，默认为()。

		kwargs是目标调用的参数的关键字dictionary，默认为{}。
	
		而Thread类还提供了很多方法，而本文只讲述程序中所需要的1个方法，其他的方法读者可以根据需要去查阅python的官方帮助文档。

		start():开启一个线程

socket的使用方法：
	1 在python中使用socket时要import socket
	2 在使用socket中又服务器端和客户端之分
	
	服务器：
		1、建立一个基于tcp协议的socket类
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			其中AF_INET指定的ipv4的协议，也可以使用AF_INET6指定ipv6的协议，而STREAM是指定面向流的tcp协议。
		2、s.bind(‘', 8089))
			绑定一个端口号，其中'127.0.0.1'是客户端的ip地址，可以使用’0.0.0.0’来绑定网络中所有的ip，8089是指定的端口，其中端口在小于1024的时候需要有管理员的权限才能绑定。
		3、s.listen(5)
			开始实行监听参数：代表连接的最大数量
		4、sock, addr = s.accept()
			接受一个客户端的连接，返回的是一个与客户端保持连接的socket对象以及客户端的ip地址和端口。该方法也会阻塞线程，直到获得客户端的连接
	客户端：
		1、s.connect(('127.0.0.1', 80))
			连接到服务器，其中'www.baidu.com’也可以是服务器的ip地址。
		2、s.send('hello')
			发送数据’hello’。TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。
		3、s. recv(1024)
			接受连接的对方发来的数据。该方法会阻塞当前线程，所以需要一个专门的线程来接受数据。
			
			
--------------------------------------------------------数据库操作---------------------------------------
cmd使用net start mysql56和net stop mysql56来启动和停止mysql的服务了
创建connection->获取cursor->执行查询->关闭cursor->关闭onnection
