java.util.Concurrent

对java.util.Map增加了原子性，也就是线程安全。

ConcurrentMap接口继承自Map接口，

 
V putIfAbsent(K key, V value);
 
1、调用 map.get(key) 方法，判断 map 里面是否有该 key 对应的 value （Locale 对象）。
2、如果返回 null，表示 map 里面没有要查找的 key-value mapping。new 一个 Locale 对象，并把 new 出来的这个对象与 key 一起放入 map。
3、最后返回新创建的 Locale 对象

boolean remove(Object key, Object value);
删除并发的map中与key值对应的entry建，如果删除成功，返回true，否则返回false

boolean replace(K key, V oldValue, V newValue);
将并发map中对应key值的value换成newValue，如果替换成功，返回true，否则返回false


V replace(K key, V value);
如果map中有对应的key值的键值对，将新的key-value键值对替换旧的键值对

以上方法都是需要实现同步保证原子性的。

ConcurrentHashMap类

ConcurrentHashMap类继承了抽象类AbstractMap，而抽象类实现了了接口Map。
而且ConcurrentHashMap还实现了上文提到的ConcurrentMap接口和Serializable接口，Serializable接口是起到标志作用，说明ConcurrentHashMap可以被序列、反序列化


serialVersionUID用处：
Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。
在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体（类）的serialVersionUID进行比较，
如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)

介绍下，concurrentHashMap与HashMap的区别：在并发编程中，HashMap容易发生死循环，而concurrentHashMap对并发提供了支持。
concurrentHashMap与HashTable的区别：HashTable使用synchronized来保证线程安全，但是在竞争激烈的情况下，效率低下。
而concurrentHashMap使用了锁分段技术，可以有效提升并发访问率。它首先讲数据分成一段一段存储起来，然后给每段数据配一把锁，
当一个线程占用锁访问其中一段数据的时候，其他段的数据也能被其他线程访问。
所以concurrentHashMap由Segment数组结构和HashEntry数组结构组成。
其中Segment是一种可重入锁也就是我们常用的ReentrantLock,HashEntry用于存储键值对数据。也就是说，要对HashEntry操作，必须先获取Segment锁。

对于ConcurrentHashMap的初始化：
用initialCapacity、loadFactor和concurrencyLevel等几个参数来初始化Segment数组、段偏移量segmentShift、段掩码segmentMask和每个segment里的HashEntry数组。

初始化segments数组：
segments数组的长度ssize通过concurrencyLevel来计算的。为了能让按位与的散列算法来定位segment数组的索引，必须保证segments数组的长度是2的N次方，
所以必须先计算出一个大于或等于concurrencyLevel的最小的2的N次方的值来作为segments数组的长度。其中concurrencyLevel的最大值是65535，所以segments数组的最大长度为65536，对应2进制的16位。

初始化segmentShift和segmentMask：
这两个全局变量都要在定位segment时的散列算法里使用，sshift等于ssize从1向左移的次数。
segmentShift用于定位参与散列算法的位数，等于32-sshift。（之所以是32，是因为ConcurrentHashMap里的hash（）方法输出的最大数是32位）
segmentMask是散列运算的掩码，等于ssize-1，因为ssize最大长度为65536，所以segmentMask最大值是65535，segmentShift最小值为16

初始化每个segment：
输入参数initialCapacity是ConcurrentHashMap的初始化容量，loadfactor是每个segment的负载因子，构造器里用这两个参数初始化每个segment。
每个segment里的HashEntry数组的长度是ConcurrentHashMap的初始化容量/segments数组的长度，默认值为1。如果这个值大于1会取2的N次方。
segment的容量是（int）HashEntry数组的长度*每个segment的负载因子，默认情况下（int）（1*0.75）等于零。

定位segment：
ConcurrentHashMap是使用分段锁Segment来保护不同段的数据，所以在插入、获取元素的时候必须先通过散列算法定位segment。
ConcurrentHashMap会对元素的hashCode进行一次再散列（目的是为了减少散列冲突，因为只要低位一样，无论高位是什么数，其散列值总是一样）。
然后使用segmentFor这个方法来定位segment。

ConcurrentHashMap的3种操作

1.get操作
先进过一次再散列，然后使用这个散列值通过散列运算定位到Segment，再通过散列算法定位打元素。
    public V get(Object key) {
        int hash = hash(key.hashCode());
        return segmentFor(hash).get(key, hash);
    }
在get操作中，不需要加锁，除非读到的值是空才会加锁重读。（HashTable的get方法是要加锁的）
之所以不需要加锁，因为get方法里讲要使用的共享变量都定义成了volatile类型。
定位HashEntry和定位Segment的散列算法虽然一样（都是与数组的长度减去1再相与），但是相与的值不一样。
定位Segment使用的是元素的hashCode通过再散列得到的值的高位，而定位HahEntry是直接使用再散列后的值。这是为了避免2次散列后的值一样。

2.put操作
put操作必须加锁。首先定位到segment，然后在segment中进行插入操作（先判断是否需要对HashEntry进行扩容，然后定位到添加元素的位置，进行添加）。
（1）是否需要扩容
	在插入HashEntry数组前进行判断是否需要扩容。这个方式比HashMap的扩容方式更靠谱。HashMap的扩容方式是先将元素插入，再判断是否需要扩容，
	这样会导致无效扩容，即扩容后不再往里添加元素。
（2）如何扩容
	先创建一个容量是原来两倍的数组，然后将原数组的元素进行再散列后插入到新的数组里。为了高效，扩容针对于某个Segment，而不是整个ConcurrentHashMap。

3.size操作
	统计整个ConcurrentHashMap里的元素大小，必须统计所有Segment里的元素再求和。Segment里的全局变量count是一个volatile变量。
	在统计时，ConcurrentHashMap先尝试2次通过不锁住Segment的方法来统计各个segment的大小，如果统计过程中count发生变化，则再采用加锁的方式来统计。
	ConcurrentHashMap是如何判断在统计的时候容器是否发生了变化：使用modCount变量，在put，remove和clean方法里操作元素前将变量modCount进行加1，
	在统计size前后通过比较modConut是否变法，就可以得知容器大小是否发生变化。


在并发编程中需要使用线程安全的队列。
两种方式：1、使用阻塞算法（使用一个锁或者两个锁：BlockingQueue和BlockingDeque） 2、非阻塞算法 （循环CAS：ConcurrentLinkedQueue、ConcurrentLinkedDeque）

ConcurrentLinkedQueue类
ConcurrentLinkedQueue是一个基于链接节点的无界线程安全队列，它采用FIFO的对节点进行排序，当添加节点时，会添加到尾部；
当获取一个元素时，会输出头部元素。采用CAS算法来实现。

（1）入队列
	1、入队队列的过程。
		tail节点不总是尾节点。
	2、定位尾节点
		next = p.getNext（）；
		return（p==next）？head：next；
	3、设置入队节点为尾节点	
	4、HOPS
		默认HOPS=1，volatile写操作开销远远大于volatile读操作。
（2）出队列
	当head节点元素为空，才会更新head节点。这种方法也是通过HOPS变量来减少CAS更新head节点的消耗，从而提高出队的效率。

ConcurrentLinkedQueue是非阻塞队列，接下来讲讲阻塞队列


java里有七个阻塞队列。阻塞队列有4种处理方式（抛出异常，返回特殊值，一直阻塞，超时退出）

阻塞队列实现原理
使用通知模式实现。

