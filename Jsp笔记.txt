Jsp笔记
Jsp指令
	page指令语法: <%@ page import="",language="",content-type=""%>

Jsp脚本
	在JSP页面中执行java代码
	语法：<% Java代码%>
Jsp声明
	在JSP页面中定义变量或者方法
	语法：<%! JAVA代码%>
Jsp表达式
	JSP页面中执行的表达式
	<% =表达式 %> //注意：表达式不以分号结束
JSP页面生命周期

--------JSP内置对象
一、什么是缓冲区
1、缓冲区：Buffer，所谓缓冲区就是内存的一块区域，用来保存临时数据
2、IO输出最原始的就是一个字节一个字节输出，效率很低。缓冲区可以先将多个字节读出来，再一次性的输出，提高效率
二、out对象
1、out对象是JspWriter类的实例，是向客户端（这里指浏览器）输出内容的常用对象。
2、常用方法：
· void println()向客户端打印字符
· void clear()清除缓冲区的内容。如果在flush之后调用，会抛出异常
· void clearBuffer() 也是清除缓冲区内容，但在flush之后不会抛出异常
· void flush()将缓冲区内容输出到客户端
· int getBufferSize()返回缓冲区的大小（字节数），如不设缓冲区则为0
· int getRemaining()返回缓冲区还剩余多少可用
· boolean isAutoFlush()返回缓冲区满时，是否自动清空缓冲区
· void close()关闭输出流

表单有两种提交方式：
get与post。
定义在<form action="dologin.jsp" name="loginForm" method="提交方式"></form>   动作／名称等顺序无所谓。
1.get：以【明文】方式，通过URL提交数据，数据在URL中【可以看到】。提交数据最多不超过【2KB】。
		安全性较低，但效率比post方式高。适合提交数据量不大，且安全要求不高的数据：比如：搜索、查询等功能。
2.post：将用户提交的信息封装在HTML HEADER内。适合提交数据量大，
		安全性高的用户信息。如：注册、修改、上传等功能。
-----=====解决乱码问题：request.setCharacterEnconding("utf-8")======--------
----request对象
		int getServerPort();//返回服务器接受此请求所用的端口号
		String getCharacterEncoding();//返回字符编码方式
		void setCharacterEncodinng();//设置请求的字符编码方式
		int getContentLength();//返回请求体的长途(以字节数)
		String getRemoteAddr();//返回发送此请求的客户端IP地址
		String getRealPath(String path);//返回虚拟路径的真实路径
		String request.getContextPath();//返回上下文路径
----response对象
		respnse对象包含了响应客户请求的有关信息
			1.输出流对象getWriter输出先于out对象之后，解决办法：out.flush()清除缓冲区内容
			2.response.sendRedirect("新地址");   //请求重定向
----请求转发和请求重定向的区别：（容易问到，要重视）
		请求转发：服务器行为，requset.getRequestDispatcher("xxx.jsp").forward(req,resp);是一次请求，转发后请求对象会保存，地址栏的URL地址不会改变
		请求重定向：客户端行为，response.sendRedirect()，本质上讲等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变
					如：url跳转就是请求重定向
----session对象：
	session实际上是一个特定的时间概念，用户浏览这个网站所花费的时间
	----session是保存在服务器的内存中，和用户是一一对应的，每一个用户对应一个session，不同的用户对应不同的session。
	session.setAttribute(值得名称，值)。session.getAttribute(值的名称)
	session总保存了很多属性，则用String[] names=session.getValueNames();然后遍历
	session.setMaxInactiveInterval(10) ,设置当前seesion最大生命周期，单位是秒
----application对象
	实现了用户间数据的共享，可存放全局变量。开始于服务器启动，终止与服务器的关闭。
	application.setAttribute(String,Object),application.getAttribute(String)
		application.getAttributeNames()返回所有可用属性名的枚举。
		--->Enumeration att = application.getAttributeNames()
			while(att.hasMoreElements())
			{	
				out.println(att.nextElement());
			}
----内置对象
	----page对象
		page对象就是指向当前jsp页面本身，有点像类中的this指针，它是java.lang.Object类的实例
	----pageContext对象
		（1）pageContext对象提供了对JSP页面中所有对象及名字空间的访问操作
		（2）pageContext对象可以访问本页面的session，可以访问本页面的application对象的任意属性值
		（3）pageContext对象是某个页面中所有功能的集大成者
		如：获得session：pageContext.getSession().getAttribute(String)
			跳转页面：pageContext.forward("xxx.jsp")
			包含一个jsp页面：pageContext.include("xxx.jsp")
	----config对象
		config对象是在一个Servlet初始化时，JSP引擎向它传递信息用的
	----Exception对象
		把可能产生异常的页面的page对象的errorPage属性设置为错误的页面，这个属性表示当页面发生异常之后，交给哪个页面去处理这个异常。errorPage="exception.jsp"
		把错误处理页面的page对象的isErrorPage属性设置为true，这个属性表示这个页面可以使用exception对象。isErrorPage="true"
		异常的消息：execption.getMessage()
		异常的字符串描述：exception.toString()
-------------------======================JavaBeans=================--------------------------
JavaBean简介
	Javabeans就是符合某种特定规范的java类。
jsp动作元素
	第一类是与存取JavaBean有关的，包括：
	<jsp:useBean><jsp:setProperty><jsp:getProperty>
	第二类。。等等
JSP——JavaBean——普通方式应用Javabean
	一、像使用普通java类一样
		1、创建一个web project项目。
		2、在src文件下，创建一个包，在包中创建一个类，满足设计原则即可
		3、在index.jsp页面中通过import导入之前创建的类（import="包名.类名"）
		4、通过使用new创建Javabean实例(创建对象)
		5、使用set方法赋值
		6、使用get方法取值
	二、在 jsp页面中使用jsp动作标签使用javabean
		<jsp:useBean>
			作用：在jsp页面中实例化或者在制定范围内使用javabean：
			<jsp:useBean id="标识符(类似于Java中的变量名)" class="java类名(需要将包名一同写入)" scope="作用范围(默认是page)"/>
		<jsp:setProperty>
			作用：给已经实例化的javabean对象的属性赋值的4种形式。
				1、需要表单提交属性：<jsp:setProperty name="Javabean实例名" property="*"/>： 与之前页面提交的表单的【所有属性进行匹配】，若有与javabean类属性名相同的，则进行赋值。比如表坛提交了username="xxx"，而javabean里有username属性，则对其进行赋值
				2、需要表单提交属性<jsp:setPropery name="Javabean实例名" property="javabean属性名" />：对【指定的属性进行匹配】
				3、手动设置属性：<jsp:setProperty name = "Javabean实例名" property="Javabean属性名" value="BeanValue" />
				4、与request参数有关,通过url传参 ：<jsp:setProperty name="Javabean实例名" property="propertyName" param="request对象中的参数名" />
			例
				1.根据表单自动匹配所有的属性
				<jsp:setProperty name="myUsers" property="*"/>
				2.根据表单自动匹配相应的属性（部分匹配）
				<jsp:setProperty name="myUsers" property="username"/>
				3.与表单无关，通过手工赋值给属性
				<jsp:setProperty name="myUsers" property="username" value=“Lisa”/>
				4.通过url传参数给属性赋值
				<jsp:setProperty name="myUsers" property="username"/>
				<jsp:setProperty name="myUsers" property="password" param=“mypass”/>
		<jsp:getProperty>
			作用：获取制定Javabean对象的属性值
			<jsp:getProperty name="Javabean实例名"  property="属性名"/>
	
----Javabean的四个作用域范围
		说明：使用usebeans的scope属性可以用来指定javabean的作用范围
				page//仅仅在当前页面有效
					与当前页面相对应，JavaBean的生命周期存在于一个页面之中，当页面关闭时JavaBean被销毁。
				request//可以通过httprequest.getattribute()方法取得javabean对象
						与JSP的request生命周期相对应，JavaBean的生命周期存在于request对象之中，当request对象销毁时JavaBean也被销毁。
				session//可以通过httpsession.getattribute()方法取得javabean对象
						与JSP的session生命周期相对应，JavaBean的生命周期存在于session会话之中，当session超时或会话结束时JavaBean被销毁。
				application//可以通过application.getattribute()方法取得javabean对象
						与JSP的application生命周期相对应，在各个用户与服务器之间共享，只有当服务器关闭时JavaBean才被销毁。
----JSP的状态管理
	----http协议的无状态性
		无状态是指，当浏览器发送请求给服务器的时候，服务器响应客户端的请求。
		但是当同一个浏览器再次发送请求给服务器时，服务器并不知道它是刚才那个浏览器。
		简单滴说，服务器不会去记得你，所以就是无状态协议。
	----保存用户的状态的两大机制（session，cookie）
		----Cookie  <-----cookie等价于笔记，提醒http协议这个健忘的老板娘
			安全风险：容易泄露用户信息
		----创建和使用Cookie
			1、创建Cookie对象.
				Cookie newCookie=new Cookie(String key,String value);
				其中参数是键值对的关系,key参数为Cookie对象的字符串描述,value参数为要保存的Cookie对象.
			2、写入Cookie对象
				response.addCookie(newCookie);
				相当于把Cookie对象保存在客户端中,因此是用(响应客户端)response内置对象来添加Cookie对象来返回给客户端.
			3、读取Cookie对象
				Cookie[] cookies=request.getCookies();
				此方法返回Cookie数组,相当于从保存在客户端的Cookie对象一并提取到服务器中,因此是用(客户端请求)request内置对象来获取保存在客户端中的Cookie对象.返回Cookie数组.
			保存的Cookie对象是以文本文件形式保存在客户端的,实际保存的Cookie对象就是字符串.
			常用方法：
				void setMaxAge(int expiry)//设置cookie有效期
				void setValue(String value)//在cookie创建后，对cookie赋值
				String getName()//获取cookie名称（字符串类型）
				String getValue()//获取cookie值（字符串类型）
				int getMaxAge（）//获取cookie有效时间
			面对保存的是中文，要转码，首先导入的包是import="java.net.*"网络包
			request.setCharacterEncodinng("utf-8");
			URLEncoder.encode(request.getParameter("username"),"utf-8");(加码)
			URLEncoder.decode(c.getValue(),"utf-8")(解码)
	Session与Cookie对比
		相同：
			1，都是保存用户状态的一种机制，
			2，都会过期。
		区别：
			（1）session保存在服务器，cookie保存在客户端
			（2）session中保存的是Object类型，cookie保存的是String类型
			（3）session随会话结束而将其存储的数据销毁，cookie可以长期保存在客户端
			（4）session保存重要的信息，cookie保存不重要的用户信息
----JSP指令与动作元素
	page：位于页面顶端，一个页面可以包含多个page指令
	include：将一个外部文件嵌入jsp中，同时解析这个页面中的jsp语句。
	taglib：使用标签库，自定义新的标签，在jsp中启动定制行为。
	----include指令
		include：将一个外部文件嵌入jsp中，同时解析这个页面中的jsp语句。
		语法：<%@include file="URL"%>
	----include动作(动作标签)
		语法：<jsp:include page="URL" flush="true|false"/>
		  	page:要包含的页面
			flush:被包含的页面是否使用缓冲读取
	include指令与include动作比较：(面试问题)
						include指令 			include动作
		发生作用的时间：页面转换期间			请求期间
		包含的内容：	文件的实际内容（代码）	页面的输出（代码结果）
		转换成Servlet：	主页面和包含页面转换	转换成独立的Servlet
						成一个Servlet
		编译时间:		较慢---资源必须被解析	较快
		执行时间：		稍快					较慢---每次资源必须被解析
		include指令（适用于页面内容不经常变化）
	----forward动作
		语法:<jsp:forward page="URL"/>
		等同于：请求转发：服务器行为，requset.getRequestDispatcher("/url").forward(req,resp)
	----param动作
		语法：<jsp:param name="参数名",value="参数值">
		1、【常常与<jsp:forward></jsp:forward>一起使用】，并作为其【子标签】。
		2、用于传递新参数或者【修改原有参数值】，修改参数时使用form表单里的参数名称即可。
			同样用request.getParameter("参数名")获取
-----------------------------项目----------------------------------------
----实现DBHelper类型（链接数据库）
		先把mysql的驱动放到WEB-INF的lib目录下（jar包）
	----------
		private static final Sring driver="com.mysql.jdbc.Driver";//数据库驱动
		//连接数据库的URL地址（固定写法）
		private static finalString url="jdbc:mysql://localhost:3306/shopping?useUnicon=true&characterEncoding=UTF-8"
		private static finalString username = "root";//数据库用户名
		private static finalString password = "";//数据库密码
		private static Connection conn = null;
		//静态代码块负责加载驱动
		static{
		try{
			Class.forName(driver);
		}
			catch(Exception ex){
				ex.printStackTrace();
			}
		}
		//单例模式返回数据库连接对象
		public static Connection getConnection() throws Exception{
			if(conn==null){
			Connection con=DriverManager.getConnection(url,username,password);
			return conn;
			}
			return conn;
		}
	---------
----创建实体类（商品实体类设计）
	1.实体类用到javabean的思想。
	2.实体类名和表名一样，属性就是字段
	3.对属性进行封装
	操作数据库通过这个javabean来操作
----创建业务逻辑类（DAO）
	-----获取数据库的商品信息
		Connection conn=null；
		PreparedStatement stmt=null;
		ResultSet rs=null;
		ArratList<实体类> list= new ArrayList<实体类>();   //商品集合   
		try{
			conn=DBHelper.getConnection();
			String sql = "....";      //sql语句
			stmt = conn.prepareStatement(sql);
			re=stmt.executeQuery();
			while(rs.next()
			{
				实体类 item = new 实体类();
				item.setId(rs.getInt("id"));
				...
				list.add(item);
			}
			return list；
		}
	-----
----商品展示(view层)
	<%@ page import="DAO类"%>
	<%@ page import="实体类"%>
	用for循环。
----显示商品详情
	1、在DAO类里，写个根据id获取商品信息的方法
		同上，做小修改
		sql="select * from items where id = ?;"
		stmt.setInt(1,id);
		if(rs.next())
		{
			...
			return item;
		}
		else{
			return null;
		}
	2、在detail.jsp页面
		导入dao类，
		类名 item = itemDao.getItemsById(Integer.parseInt(request.getParameter("id")));
----使用Cookie实现保存商品浏览记录
	在detail.jsp页面:
			String list="";
			Cookie[] cookies = request.getCookies();
			if(cookies!=null&&cookies.lengeth>=0){
				for()
				{
					if(c.getName().equals("ListViewCookie"))
					{
						list = c.getValue;
					}
				}
			}
			list+=request.getParameter("id")+"#";
			//记录超过1000条，清零
			String[] arr = list.split("#");
			if(arr!=null&&arr.lengeth>0)
			{
				if(arr.lengeth>=1000)
				{
					list="";
				}
			}
			Cookie cookie = new Cookie("ListViewCookie",list);
			response.addCookie(cookie);
			
	在DAO类中
		添加方法，获取最近浏览的前5条商品信息
		ArratList<> itemlist = new ArratList<>();
		int iCount=5;//每次返回前5条记录
		if(list!=null&&list.length()>0)
		{
			String[] arr = list.split("#");
			//如果商品记录大于等于5条
			if(arr.lengeth>=5){
				for(int i =arr.lengeth-1;i>=arr.length-iCount;i--)
				{	
					itemlist.add(上面方法(Integer.parseInt(arr[i])));
				}
			}
			else{
				for(int i =arr.lengeth-1;i>=0;i--)
				{
					itemlist.add(上面方法(Integer.parseInt(arr[i])));
				}
			}
			return itemlist;
		}
		else{return null;}
	在界面显示：
		Arraylist<> itemlist = 方法(list);
		if(itemlist!=null&&itemlist.size()>0)
		{
			for(Items i :itemlist)
			{
				输出内容
			}
		}